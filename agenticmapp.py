# -*- coding: utf-8 -*-
"""AgenticMApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1inCIg9OqOxapjAvYeTRMi23REbWwiZSN
"""

!pip install streamlit pyngrok

# Streamlit Agentic AI Fraud Detection App

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt

# Title
st.title("Agentic AI Fraud Detection Application")

# Instructions
st.write("""
Upload a CSV file containing your accounting transactions.
Columns must include:
- EntryID
- Amount
- VendorCategory
- DayOfMonth
- PriorFlag
""")

# Upload file
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

# Process file if uploaded
if uploaded_file:
    df = pd.read_csv(uploaded_file)

    st.subheader("Raw Data Sample")
    st.dataframe(df.head())

    # Feature engineering
    bins = [0,1000,5000,10000,20000,50000]
    labels = ["<$1k","$1k-5k","$5k-10k","$10k-20k","$20k-50k"]
    df["AmountBucket"] = pd.cut(df["Amount"], bins=bins, labels=labels)
    df["VendorCode"] = pd.Categorical(df["VendorCategory"]).codes
    df["Prior_Vendor"] = df["PriorFlag"] * df["VendorCode"]

    # Features and target (dummy labels if real labels are missing)
    if "IsFraud" not in df.columns:
        df["IsFraud"] = 0

    X = df[["Amount","DayOfMonth","PriorFlag","VendorCode","Prior_Vendor"]]
    y = df["IsFraud"]

    # Train Random Forest
    rf = RandomForestClassifier(n_estimators=100, random_state=42)
    rf.fit(X, y)
    fraud_probs = rf.predict_proba(X)[:,1]
    df["FraudProbability"] = fraud_probs

    st.subheader("Model Performance (if labels exist)")
    if df["IsFraud"].nunique() > 1:
        auc = roc_auc_score(y, fraud_probs)
        st.write(f"AUC: {auc:.3f}")

    # Explanations
    def explain(row):
        reasons=[]
        if row["PriorFlag"]:
            reasons.append("prior suspicious activity")
        if row["Amount"] > 20000:
            reasons.append("high transaction amount")
        if row["VendorCategory"] in ["Consulting","Travel"]:
            reasons.append("higher-risk vendor")
        if reasons:
            return "Flagged due to: " + ", ".join(reasons)
        else:
            return "No risk factors detected."
    df["Explanation"] = df.apply(explain, axis=1)

    # Agentic AI Q-learning
    q_table = {}
    alpha = 0.1
    gamma = 0.9
    for i, row in df.iterrows():
        state = (row["PriorFlag"], row["VendorCode"])
        action = "Flag" if row["PriorFlag"] else "Approve"
        if action=="Flag" and row["IsFraud"]:
            reward = +1
        elif action=="Approve" and row["IsFraud"]:
            reward = -1
        else:
            reward = 0
        q_table[state] = q_table.get(state,0) + alpha*(reward - q_table.get(state,0))

    # Convert Q-table to DataFrame
    q_df = pd.DataFrame([
        {"PriorFlag":k[0], "VendorCode":k[1], "QValue":v}
        for k,v in q_table.items()
    ])

    # Show Q-values heatmap
    st.subheader("Agentic AI Policy Heatmap (Q-values)")
    pivot = q_df.pivot("VendorCode","PriorFlag","QValue")
    fig, ax = plt.subplots()
    cax = ax.matshow(pivot, cmap="viridis")
    fig.colorbar(cax)
    ax.set_xlabel("Prior Flag (0=No, 1=Yes)")
    ax.set_ylabel("Vendor Code")
    ax.set_title("Q-Value Heatmap")
    st.pyplot(fig)

    # Show predictions
    st.subheader("Predictions and Explanations")
    st.dataframe(df[["EntryID","FraudProbability","Explanation"]])

    # Download results
    csv = df.to_csv(index=False).encode()
    st.download_button(
        label="Download Results CSV",
        data=csv,
        file_name="fraud_detection_results.csv",
        mime="text/csv"
    )