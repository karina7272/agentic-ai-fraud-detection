# -*- coding: utf-8 -*-
"""AgenticMApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1inCIg9OqOxapjAvYeTRMi23REbWwiZSN
"""

# Streamlit Agentic AI Fraud Detection App

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt

# Set page config
st.set_page_config(
    page_title="Agentic AI Fraud Detection",
    layout="wide",
)

# Custom CSS for business background
st.markdown(
    """
    <style>
    .stApp {
        background-image: url('https://images.unsplash.com/photo-1556761175-4b46a572b786?fit=crop&w=1950&q=80');
        background-size: cover;
        background-attachment: fixed;
    }
    .css-18e3th9 {
        background-color: rgba(255, 255, 255, 0.85);
        padding: 1rem;
        border-radius: 0.5rem;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Page title and subtitle
st.title("Agentic AI Fraud Detection Application")
st.markdown(
    "<h4 style='text-align: center; color: #333;'>Empowering Accountants with Explainable AI for Fraud Detection</h4>",
    unsafe_allow_html=True
)

# Instructions
st.write("""
Upload a CSV file containing your accounting transactions.
Columns must include:
- EntryID
- Amount
- VendorCategory
- DayOfMonth
- PriorFlag
""")

# Upload file
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    st.subheader("Raw Data Sample")
    st.dataframe(df.head())

    # Feature engineering
    bins = [0,1000,5000,10000,20000,50000]
    labels = ["<$1k","$1k-5k","$5k-10k","$10k-20k","$20k-50k"]
    df["AmountBucket"] = pd.cut(df["Amount"], bins=bins, labels=labels)
    df["VendorCode"] = pd.Categorical(df["VendorCategory"]).codes
    df["Prior_Vendor"] = df["PriorFlag"] * df["VendorCode"]

    # Ensure IsFraud column exists
    if "IsFraud" not in df.columns:
        df["IsFraud"] = 0

    X = df[["Amount","DayOfMonth","PriorFlag","VendorCode","Prior_Vendor"]]
    y = df["IsFraud"]

    # Train Random Forest
    rf = RandomForestClassifier(n_estimators=100, random_state=42)
    rf.fit(X, y)
    fraud_probs = rf.predict_proba(X)[:,1]
    df["FraudProbability"] = fraud_probs

    # Show AUC if labels exist
    st.subheader("Model Performance (if labels exist)")
    if df["IsFraud"].nunique() > 1:
        auc = roc_auc_score(y, fraud_probs)
        st.write(f"AUC: {auc:.3f}")

    # Q-learning Agentic AI
    q_table = {}
    alpha = 0.1
    gamma = 0.9

    for _, row in df.iterrows():
        state = (row["PriorFlag"], row["VendorCode"])
        action = "Flag" if row["PriorFlag"] else "Approve"
        if action=="Flag" and row["IsFraud"]:
            reward = +1
        elif action=="Approve" and row["IsFraud"]:
            reward = -1
        else:
            reward = 0
        q_table[state] = q_table.get(state,0) + alpha*(reward - q_table.get(state,0))

    # Convert Q-table to DataFrame
    q_df = pd.DataFrame([
        {"PriorFlag":k[0], "VendorCode":k[1], "QValue":v}
        for k,v in q_table.items()
    ])

    # Safely pivot with pivot_table()
    pivot = q_df.pivot_table(
        index="VendorCode",
        columns="PriorFlag",
        values="QValue",
        fill_value=0
    )

    # Plot heatmap
    st.subheader("Agentic AI Policy Heatmap (Q-values)")
    fig, ax = plt.subplots()
    cax = ax.matshow(pivot, cmap="viridis")
    fig.colorbar(cax)
    ax.set_xlabel("Prior Flag (0=No, 1=Yes)")
    ax.set_ylabel("Vendor Code")
    ax.set_title("Q-Value Heatmap")
    st.pyplot(fig)

    # Generate explanations
    def explain(row):
        reasons=[]
        if row["PriorFlag"]:
            reasons.append("prior suspicious activity")
        if row["Amount"] > 20000:
            reasons.append("high transaction amount")
        if row["VendorCategory"] in ["Consulting","Travel"]:
            reasons.append("higher-risk vendor")
        if reasons:
            return "Flagged due to: " + ", ".join(reasons)
        else:
            return "No risk factors detected."

    df["Explanation"] = df.apply(explain, axis=1)

    # Show predictions
    st.subheader("Predictions and Explanations")
    st.dataframe(df[["EntryID","FraudProbability","Explanation"]])

    # Download results
    csv = df.to_csv(index=False).encode()
    st.download_button(
        label="Download Results CSV",
        data=csv,
        file_name="fraud_detection_results.csv",
        mime="text/csv"
    )