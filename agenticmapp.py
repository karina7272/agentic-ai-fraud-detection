# -*- coding: utf-8 -*-
"""AgenticMApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1inCIg9OqOxapjAvYeTRMi23REbWwiZSN
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import roc_auc_score, confusion_matrix
from xgboost import XGBClassifier
import shap

# Set Streamlit layout
st.set_page_config(layout="wide")
st.title("ðŸ§  Agentic AI Fraud Detection Application")
st.markdown("**Empowering Accountants with Explainable AI for Fraud Detection**")

# Upload CSV
uploaded_file = st.file_uploader("Upload a CSV file (Columns: EntryID, Amount, VendorCategory, DayOfMonth, PriorFlag, IsFraud)", type="csv")
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("Raw Data Sample")
    st.dataframe(df.head())

    # Step 1: Perception - Preprocessing
    st.subheader("Step 1: Perception Module - Data Preprocessing")
    df["PriorFlag"] = df["PriorFlag"].astype(int)
    df["IsFraud"] = df["IsFraud"].astype(int)
    df["VendorCode"] = LabelEncoder().fit_transform(df["VendorCategory"])
    df["Prior_Vendor"] = df["VendorCode"] * df["PriorFlag"]

    bins = [0, 1000, 5000, 10000, 20000, 50000]
    labels_bins = ["$1k-5k", "$5k-10k", "$10k-20k", "$20k-50k"]
    df["AmountBucket"] = pd.cut(df["Amount"], bins=bins, labels=labels_bins)

    features = ["Amount", "DayOfMonth", "VendorCode", "Prior_Vendor", "PriorFlag"] + pd.get_dummies(df["AmountBucket"]).columns.tolist()
    df = pd.concat([df, pd.get_dummies(df["AmountBucket"], prefix="AmountBucket")], axis=1)

    # Step 2: Policy Learning
    st.subheader("Step 2: Policy Learning - Multi-Model Training")
    st.markdown("Training Logistic Regression, Random Forest, XGBoost, Neural Network")

    X = df[features]
    y = df["IsFraud"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    models = {
        "Logistic Regression": LogisticRegression(max_iter=1000),
        "Random Forest": RandomForestClassifier(n_estimators=100),
        "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss'),
        "Neural Network": MLPClassifier(hidden_layer_sizes=(50,), max_iter=500)
    }

    confusion_matrices = {}
    auc_scores = {}

    for name, model in models.items():
        try:
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            auc = roc_auc_score(y_test, y_pred)
            auc_scores[name] = auc
            confusion_matrices[name] = confusion_matrix(y_test, y_pred)
        except Exception as e:
            st.warning(f"{name} failed: {str(e)}")

    # Plot Confusion Matrices
    fig, axs = plt.subplots(2, 2, figsize=(12, 10))
    axs = axs.flatten()
    for i, (name, cm) in enumerate(confusion_matrices.items()):
        sns.heatmap(cm, annot=True, fmt="d", ax=axs[i], cmap="Blues")
        axs[i].set_title(name)
        axs[i].set_xlabel("Predicted")
        axs[i].set_ylabel("Actual")
    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)

    # Step 3: Planning Module
    st.subheader("Step 3: Planning Module - Q-Learning Policy (Optimized)")
    df_q = df.sample(n=2000, random_state=42).copy()
    df_q["AmountBin"] = pd.cut(df_q["Amount"], bins=bins, labels=labels_bins)
    state_space = pd.MultiIndex.from_product(
        [df_q["PriorFlag"].unique(), df_q["AmountBin"].unique()],
        names=["PriorFlag", "AmountBin"]
    )
    q_table = pd.DataFrame(0.0, index=state_space, columns=["Approve", "Flag", "Reject"])
    alpha, gamma, eps = 0.1, 0.9, 0.2

    for _ in range(2):
        for _, row in df_q.iterrows():
            state = (row["PriorFlag"], row["AmountBin"])
            if pd.isnull(state[1]):
                continue
            if np.random.rand() < eps:
                action = np.random.choice(["Approve", "Flag", "Reject"])
            else:
                action = q_table.loc[state].idxmax()

            if action == "Flag" and row["IsFraud"]:
                reward = 1
            elif action == "Approve" and row["IsFraud"]:
                reward = -1
            elif action == "Flag" and not row["IsFraud"]:
                reward = -0.5
            else:
                reward = 0

            old_q = q_table.loc[state, action]
            future_q = q_table.loc[state].max()
            new_q = old_q + alpha * (reward + gamma * future_q - old_q)
            q_table.loc[state, action] = new_q

    heatmap_data = q_table["Flag"].unstack()
    fig, ax = plt.subplots(figsize=(6, 6))
    cax = ax.imshow(heatmap_data, cmap="Blues")
    ax.set_title("Q-Value Heatmap (Flag Action)")
    ax.set_xlabel("PriorFlag")
    ax.set_ylabel("AmountBin")
    ax.set_xticks([0, 1])
    ax.set_xticklabels(["No Prior", "Prior"])
    ax.set_yticks(np.arange(len(labels_bins)))
    ax.set_yticklabels(labels_bins)
    fig.colorbar(cax, ax=ax, label="Q-Value")
    st.pyplot(fig)
    plt.close(fig)

    # Step 4: Execution - Interpretability
    st.subheader("Step 4: Execution Module - Interpretability")
    rf_model = models.get("Random Forest")
    if rf_model:
        importances = rf_model.feature_importances_
        indices = np.argsort(importances)[::-1]
        fig, ax = plt.subplots()
        ax.barh(np.array(features)[indices], importances[indices])
        ax.set_title("Random Forest Feature Importances")
        ax.invert_yaxis()
        st.pyplot(fig)
        plt.close(fig)

        try:
            explainer = shap.TreeExplainer(rf_model)
            shap_values = explainer.shap_values(X_test)
            st.set_option("deprecation.showPyplotGlobalUse", False)
            st.markdown("SHAP Summary Plot (Random Forest)")
            shap.summary_plot(shap_values[1], X_test, show=False)
            st.pyplot(bbox_inches='tight')
        except Exception as e:
            st.warning(f"SHAP plot failed: {str(e)}")

    # AI Action Diagram
    st.markdown("### AI Action â†’ Auditor Next Steps")
    st.image("https://raw.githubusercontent.com/karinakast/agentic-ai-fraud-detection/main/auditor_decision_flow.png", caption="AI Action to Auditor Follow-up Diagram")