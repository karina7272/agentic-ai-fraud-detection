# -*- coding: utf-8 -*-
"""AgenticMApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1inCIg9OqOxapjAvYeTRMi23REbWwiZSN
"""

# Agentic AI Fraud Detection Application
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Agentic AI Fraud Detection", layout="wide")

# --- Custom CSS for light background and better contrast ---
st.markdown("""
<style>
body {
    background-color: #f4f6f9;
    color: #333333;
}
h1, h2, h3 {
    color: #2c3e50;
}
.stButton button {
    background-color: #2c3e50;
    color: white;
}
</style>
""", unsafe_allow_html=True)

# --- App Title ---
st.title("Agentic AI Fraud Detection Application")
st.markdown("Empowering Accountants with Explainable AI for Fraud Detection")

# --- File Upload ---
uploaded_file = st.file_uploader("Upload a CSV file (Columns: EntryID, Amount, VendorCategory, DayOfMonth, PriorFlag, IsFraud)", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("Raw Data Sample")
    st.dataframe(df.head())

    # --- Preprocessing ---
    st.subheader("Step 1: Perception Module - Data Preprocessing")
    df["VendorCode"] = df["VendorCategory"].astype("category").cat.codes
    X = df[["Amount", "VendorCode", "DayOfMonth", "PriorFlag"]]
    y = df["IsFraud"]

    # --- Train/Test Split ---
    train_size = int(0.8 * len(df))
    X_train, y_train = X.iloc[:train_size], y.iloc[:train_size]
    X_test, y_test = X.iloc[train_size:], y.iloc[train_size:]

    # --- Model Training (Policy Learning) ---
    st.subheader("Step 2: Policy Learning - Random Forest Classifier")
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]

    # --- Performance Metrics ---
    auc = roc_auc_score(y_test, y_proba)
    cm = confusion_matrix(y_test, y_pred)

    st.markdown(f"**AUC:** {auc:.3f}")
    st.markdown("**Confusion Matrix:**")
    st.write(cm)

    # --- Q-Value Heatmap (Planning Module) ---
    st.subheader("Step 3: Planning Module - Q-Value Heatmap")
    df["AmountBucket"] = pd.cut(df["Amount"], bins=[0,5000,15000,50000], labels=["Low","Medium","High"])
    q_values = df.groupby(["VendorCode","PriorFlag"])["IsFraud"].mean().reset_index().rename(columns={"IsFraud":"QValue"})

    heatmap_data = q_values.pivot(index="VendorCode", columns="PriorFlag", values="QValue")
    fig, ax = plt.subplots()
    sns.heatmap(heatmap_data, annot=True, cmap="YlGnBu", ax=ax)
    plt.title("Q-Value Heatmap by Vendor and PriorFlag")
    st.pyplot(fig)

    # --- Feature Importance ---
    st.subheader("Step 4: Execution Module - Feature Importance")
    feat_importances = pd.Series(model.feature_importances_, index=X.columns)
    fig2, ax2 = plt.subplots()
    feat_importances.sort_values().plot(kind="barh", ax=ax2)
    plt.title("Feature Importance")
    st.pyplot(fig2)

    # --- Download Prediction Results ---
    st.subheader("Step 5: Downloadable Outputs")
    df["PredictedFraudProb"] = model.predict_proba(X)[:,1]
    csv = df.to_csv(index=False).encode()
    st.download_button("Download Results CSV", csv, "fraud_detection_results.csv", "text/csv")

else:
    st.info("Awaiting CSV file upload.")

# --- Footer ---
st.markdown("---")
st.caption("Â© 2024 Agentic AI Research | Empowering Autonomous Accounting Systems")